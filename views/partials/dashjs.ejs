<!--   Core JS Files   -->
  <!-- <script src="../assets/js/core/jquery.min.js" type="text/javascript"></script> -->
  <script src="../assets/js/core/popper.min.js" type="text/javascript"></script>
  <script src="../assets/js/core/bootstrap.min.js"></script>
  <script src="../assets/js/plugins/perfect-scrollbar.min.js"></script>
  <script src="../assets/js/plugins/smooth-scrollbar.min.js"></script>
  <script src="../assets/js/plugins/chartjs.min.js"></script>
  <!-- Popperjs -->
  <!-- <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.2/dist/umd/popper.min.js"
  crossorigin="anonymous"></script> -->
  <!-- Tempus Dominus JavaScript -->
  <script src="https://cdn.jsdelivr.net/gh/Eonasdan/tempus-dominus@master/dist/js/tempus-dominus.js"
  crossorigin="anonymous"></script>
  <!-- Tempus Dominus Styles -->
  <link href="https://cdn.jsdelivr.net/gh/Eonasdan/tempus-dominus@master/dist/css/tempus-dominus.css"
  rel="stylesheet" crossorigin="anonymous">

  <script>
    var chkenv = document.getElementById('chkenv');
    var lblenv = document.getElementById('lblenv');
    chkenv.addEventListener('change', async function (e){      
      if (chkenv.checked) lblenv.innerHTML='Production'
      else lblenv.innerHTML='Sandbox'
    })
  </script>
  <script>    
    const dateConfig = {
    display: {      
      components: {
        decades: true,
        year: true,
        month: true,
        date: true,
        hours: false,
        minutes: false,
        seconds: false,
      }
    }};
    const linkedPicker1Element = document.getElementById('linkedPickers1Input');
    const linkedPicker2Element = document.getElementById('linkedPickers2Input');
    const linked1 = new tempusDominus.TempusDominus(linkedPicker1Element, dateConfig);
    const linked2 = new tempusDominus.TempusDominus(linkedPicker2Element, dateConfig);

    //using event listeners
    linkedPicker1Element.addEventListener(tempusDominus.Namespace.events.change, (e) => {
      linked2.updateOptions({
        restrictions: {
          minDate: e.detail.date
        }
      });
    });

    //using subscribe method
    const subscription = linked2.subscribe(tempusDominus.Namespace.events.change, (e) => {
      linked1.updateOptions({
        restrictions: {
          maxDate: e.date
        }
      });      
    });

  </script>
  <script>
    var chartDropOff
    var chartDropOff2
    var btnSearch = document.getElementById('btnSearch');
    btnSearch.addEventListener('click', async function (e){

      if ((linked1.dates.picked.length > 0) && (linked2.dates.picked.length>0))
      {
        let dateFrom = linked1.dates.picked[0]
        let dateTo = linked2.dates.picked[0]
        let month = dateFrom.month + 1
        let dateFromStr = `${dateFrom.year}-${month}-${dateFrom.date}`
        month = dateTo.month + 1
        let dateToStr = `${dateTo.year}-${month}-${dateTo.date}`

        let env =1
        if (!chkenv.checked) env=0
        let queryString = `?env=${env}&dateFrom=${dateFromStr}&dateTo=${dateToStr}`

        //GetDropOffByEvents
        let url = "/dropOffGroupByEvents" + queryString;
        let dropOffData = await FetchGetData(url)
        PrepareDropOffChart(dropOffData)

        //Get Conversions
        url = "/getConversions" + queryString;
        let conversions = await FetchGetData(url)
        var lblconversions = document.getElementById('lblConversions');
        lblconversions.innerHTML=conversions.length;

        //Get Full Journey Conversion
        url = "/getFullJourneyConversion" + queryString;
        let fullJourneyConversion = await FetchGetData(url)
        var lblFullJourneyConversion = document.getElementById('lblFullJourneyConversion');
        lblFullJourneyConversion.innerHTML=fullJourneyConversion.length;

        //Get Carry Forward Conversion
        url = "/getCarryForwardConversion" + queryString;
        let carryForwardConversion = await FetchGetData(url)
        var lblCarryForwardConversion = document.getElementById('lblCarryForwardConversion');
        lblCarryForwardConversion.innerHTML=carryForwardConversion.length;
      }
      else{
        alert('Date cannot be empty!')
      }
      
      
    });

    function PrepareDropOffChart(data)
    {
        //console.log(data)
        let dropOffDataSet = []
        let allEventDataSet = []
        let gateCrasherDataSet = []
        let label=[]
        try{
        for(let i =0;i< data.allEventDataSet.data.length;i++)
        {
            let element = data.allEventDataSet.data[i]          
            label.push(element.eventName)
            allEventDataSet.push(element.count)
         
            dropOffDataSet.push(GetDataSetCount(data.dropOffDataSet.data, element.seq))
            gateCrasherDataSet.push(GetDataSetCount(data.gateCrasherDataSet.data, element.seq))
        
            //console.log(element.seq + ":" + element.name + ":" + parseInt(element.cnt) + ":" + cnt)
        }
        }
        catch(err){
          console.log(err)
          alert(err)
        }

        DropoffChart(dropOffDataSet.slice(0,17),allEventDataSet.slice(0,17), gateCrasherDataSet.slice(0,17), label.slice(0,17))
        DropoffChart2(dropOffDataSet.slice(18,36),allEventDataSet.slice(18,36), gateCrasherDataSet.slice(18,36), label.slice(18,36))
    }
    
    function GetDataSetCount(dataset, seq)
    {
      let cnt = 0
     
      for(let i =0;i< dataset.length;i++)
      {
        let element = dataset[i]      
        //console.log(element.seq==seq)
        if (element.seq==seq){
            cnt = element.count
            break           
        }
      }
      return cnt;
    }

    function DropoffChart(dropoffdataset, alleventdataset, gatecrasherdataset, label)
    {
      if (chartDropOff){
        console.log('destroy')
        chartDropOff.destroy()
      }
      var ctx4 = document.getElementById("chart-dropoff").getContext("2d");
      chartDropOff = new Chart(ctx4, {
          type: "line",
          data: {
            //labels: [1,2,3,4],
            labels: label,
            datasets: [{
              label: "DropOff Events",
              tension: 0,
              borderWidth: 0,
              pointRadius: 5,
              pointBackgroundColor: "rgba(255, 255, 255, .8)",
              pointBorderColor: "transparent",
              borderColor: "rgba(255, 255, 255, .8)",
              borderWidth: 4,
              backgroundColor: "transparent",
              fill: true,
              data: dropoffdataset,
              maxBarThickness: 6

            },{
              type:'line',
              label: "All Events",
              tension: 0,
              borderWidth: 0,
              pointRadius: 5,
              pointBackgroundColor: "rgba(255, 255, 255, .8)",
              pointBorderColor: "transparent",
              borderColor: "rgba(255, 115, 255, .8)",
              borderWidth: 4,
              backgroundColor: "transparent",
              fill: false,
              data: alleventdataset,
              maxBarThickness: 6

            },{
              type:'bar',
              label: "Non-Linear Event",
              tension: 0,
              borderWidth: 0,
              pointRadius: 5,
              pointBackgroundColor: "rgba(255, 255, 255, .8)",
              pointBorderColor: "transparent",
              borderColor: "rgba(255, 200, 255, .8)",
              borderWidth: 4,
              backgroundColor: "transparent",
              fill: false,
              data: gatecrasherdataset,
              maxBarThickness: 6

            }],
          },
          options: {
            responsive: true,
            maintainAspectRatio: true,
            plugins: {
              legend: {
                display: true,
              }
            },
            interaction: {
              intersect: false,
              mode: 'index',
            },
            scales: {
              y: {
                grid: {
                  drawBorder: false,
                  display: true,
                  drawOnChartArea: true,
                  drawTicks: false,
                  borderDash: [5, 5],
                  color: 'rgba(255, 255, 255, .2)'
                },
                ticks: {
                  display: true,
                  padding: 10,
                  color: '#f8f9fa',
                  font: {
                    size: 14,
                    weight: 300,
                    family: "Roboto",
                    style: 'normal',
                    lineHeight: 2
                  },
                }
              },
              x: {
                grid: {
                  drawBorder: false,
                  display: false,
                  drawOnChartArea: false,
                  drawTicks: false,
                  borderDash: [5, 5]
                },
                ticks: {
                  display: true,
                  color: '#f8f9fa',
                  padding: 10,
                  font: {
                    size: 14,
                    weight: 300,
                    family: "Roboto",
                    style: 'normal',
                    lineHeight: 2
                  },
                }
              },
            },
          },
        });
    }
    function DropoffChart2(dropoffdataset, alleventdataset, gatecrasherdataset, label)
    {      
      if (chartDropOff2){
        console.log('destroy chartDropOff2')
        chartDropOff2.destroy()
      }
      var ctx = document.getElementById("chart-dropoff2").getContext("2d");
      chartDropOff2 = new Chart(ctx, {
          type: "line",
          data: {
            //labels: [1,2,3,4],
            labels: label,
            datasets: [{
              label: "DropOff Events",
              tension: 0,
              borderWidth: 0,
              pointRadius: 5,
              pointBackgroundColor: "rgba(255, 255, 255, .8)",
              pointBorderColor: "transparent",
              borderColor: "rgba(255, 255, 255, .8)",
              borderWidth: 4,
              backgroundColor: "transparent",
              fill: true,
              data: dropoffdataset,
              maxBarThickness: 6

            },{
              type:'line',
              label: "All Events",
              tension: 0,
              borderWidth: 0,
              pointRadius: 5,
              pointBackgroundColor: "rgba(255, 255, 255, .8)",
              pointBorderColor: "transparent",
              borderColor: "rgba(255, 115, 255, .8)",
              borderWidth: 4,
              backgroundColor: "transparent",
              fill: false,
              data: alleventdataset,
              maxBarThickness: 6

            },{
              type:'bar',
              label: "Non-Linear Event",
              tension: 0,
              borderWidth: 0,
              pointRadius: 5,
              pointBackgroundColor: "rgba(255, 255, 255, .8)",
              pointBorderColor: "transparent",
              borderColor: "rgba(255, 200, 255, .8)",
              borderWidth: 4,
              backgroundColor: "transparent",
              fill: false,
              data: gatecrasherdataset,
              maxBarThickness: 6

            }],
          },
          options: {
            responsive: true,
            maintainAspectRatio: true,
            plugins: {
              legend: {
                display: true,
              }
            },
            interaction: {
              intersect: false,
              mode: 'index',
            },
            scales: {
              y: {
                grid: {
                  drawBorder: false,
                  display: true,
                  drawOnChartArea: true,
                  drawTicks: false,
                  borderDash: [5, 5],
                  color: 'rgba(255, 255, 255, .2)'
                },
                ticks: {
                  display: true,
                  padding: 10,
                  color: '#f8f9fa',
                  font: {
                    size: 14,
                    weight: 300,
                    family: "Roboto",
                    style: 'normal',
                    lineHeight: 2
                  },
                }
              },
              x: {
                grid: {
                  drawBorder: false,
                  display: false,
                  drawOnChartArea: false,
                  drawTicks: false,
                  borderDash: [5, 5]
                },
                ticks: {
                  display: true,
                  color: '#f8f9fa',
                  padding: 10,
                  font: {
                    size: 14,
                    weight: 300,
                    family: "Roboto",
                    style: 'normal',
                    lineHeight: 2
                  },
                }
              },
            },
          },
        });
    }
   
  </script>

